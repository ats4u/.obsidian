/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ZettelkastenOutliner
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ZettelkastenOutliner = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "create-outline",
      name: "Create outline",
      checkCallback: (checking) => {
        const currentFile = this.app.workspace.getActiveFile();
        if (!!currentFile) {
          if (checking) {
            return true;
          } else {
            const outlineName = `Zettelkasten Outline ${new Date().getTime()}.md`;
            this.app.vault.create(outlineName, "").then((outputFile) => {
              this.parseZettel(outputFile, currentFile, 0);
              this.app.workspace.openLinkText(outputFile.name, "", true);
            });
          }
        } else {
          return false;
        }
      }
    });
  }
  getChildrenFiles(file) {
    let children = [];
    const linkToFile = `[[${file.name.replace(/\.md$/, "")}]]`;
    const fullLinkToFile = `[[${file.path.replace(/\.md$/, "")}]]`;
    this.app.vault.getMarkdownFiles().forEach((markdownFile) => {
      var _a, _b, _c, _d;
      if (((_b = (_a = this.app.metadataCache.getFileCache(markdownFile)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.parent) === linkToFile || ((_d = (_c = this.app.metadataCache.getFileCache(markdownFile)) == null ? void 0 : _c.frontmatter) == null ? void 0 : _d.parent) === fullLinkToFile) {
        children.push(markdownFile);
      }
    });
    return children;
  }
  parseZettel(outputFile, zettel, indentationLevel) {
    this.app.vault.append(outputFile, this.generateListItem(zettel, indentationLevel));
    this.getChildrenFiles(zettel).forEach((child) => {
      this.parseZettel(outputFile, child, indentationLevel + 1);
    });
  }
  generateListItem(file, indentationLevel) {
    let identation = "";
    for (let i = 0; i < indentationLevel; i++) {
      identation = identation.concat("  ");
    }
    return `${identation}- ![[${file.path.replace(/\.md$/, "")}]]
`;
  }
};


/* nosourcemap */